version: '3'
services:
  base: 
    container_name: base
    image: oleksiionsoftware/base:${OLEKSIIONSOFTWARE_VERSION:-latest}
    build:
      context: .
      dockerfile: ./OleksiiOnSoftware.Config.Base/Dockerfile
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  tools:
    container_name: tools
    image: oleksiionsoftware/tools:${OLEKSIIONSOFTWARE_VERSION:-latest}
    entrypoint: "tail -f /dev/null"
    build:
      context: .
      dockerfile: ./OleksiiOnSoftware.Config.Tools/Dockerfile
    volumes:
      - "tools:/app" 
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  nginx:
    container_name: nginx
    image: oleksiionsoftware/nginx:${OLEKSIIONSOFTWARE_VERSION:-latest}
    build:
      context: .
      dockerfile: ./OleksiiOnSoftware.Services.Nginx/Dockerfile
    volumes:
      - certs:/etc/letsencrypt
      - certs-data:/data/letsencrypt
    labels:
      - "com.oleksiionsoftware.description: Reverse Proxy"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - web
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  redis:
    container_name: redis
    image: "redis:alpine"
    labels:
      - "com.oleksiionsoftware.description: Non-persistent data store"
    expose:
     - 6379
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  command_handler:
    container_name: command_handler
    image: oleksiionsoftware/command_handler:${OLEKSIIONSOFTWARE_VERSION:-latest}
    build:
      context: .
      dockerfile: ./OleksiiOnSoftware.Services.Blog.CommandHandler/Dockerfile
      args:
        version: ${OLEKSIIONSOFTWARE_VERSION:-latest}
    depends_on:
      - base
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  event_handler:
    container_name: event_handler
    image: oleksiionsoftware/event_handler:${OLEKSIIONSOFTWARE_VERSION:-latest}
    build:
      context: .
      dockerfile: ./OleksiiOnSoftware.Services.Blog.EventHandler/Dockerfile
      args:
        version: ${OLEKSIIONSOFTWARE_VERSION:-latest}
    depends_on:
      - base
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  api:
    container_name: api
    image: oleksiionsoftware/api:${OLEKSIIONSOFTWARE_VERSION:-latest}
    build:
      context: .
      dockerfile: ./OleksiiOnSoftware.Services.Blog.Api/Dockerfile
      args:
        version: ${OLEKSIIONSOFTWARE_VERSION:-latest}
    expose:
      - 5001
    depends_on:
      - base
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  import:
    container_name: import
    image: oleksiionsoftware/import:${OLEKSIIONSOFTWARE_VERSION:-latest}
    entrypoint: wait-for-it -t 0 api:5001 -s --
    command: dotnet OleksiiOnSoftware.Services.Blog.Import.dll
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    build:
      context: .
      dockerfile: ./OleksiiOnSoftware.Services.Blog.Import/Dockerfile
      args:
        version: ${OLEKSIIONSOFTWARE_VERSION:-latest}
    volumes:
      - "tools:/tools"
    depends_on:
      - base
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  web:
    container_name: web
    image: oleksiionsoftware/web:${OLEKSIIONSOFTWARE_VERSION:-latest}
    build: 
      context: .
      dockerfile: ./OleksiiOnSoftware.Services.Blog/Dockerfile
    environment: 
      - NODE_ENV=production
      - NODE_PORT=3000
      - NODE_HOSTNAME=0.0.0.0
      - API_PUBLIC_HOSTNAME=https://oleksiionsoftware.com
      - API_INTERNAL_HOSTNAME=http://api:5001
    expose:
      - 3000
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
volumes: 
  tools:
  certs:
  certs-data: